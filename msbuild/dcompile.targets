<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <DCompiler Condition="'$(DCompiler)' == ''">DMD</DCompiler>
  </PropertyGroup>

  <ItemGroup>
    <PropertyPageSchema Condition="'$(DCompiler)' != 'None'" Include="$(MSBuildThisFileDirectory)$(DCompiler).xml" />
    <AvailableItemName Condition="'$(DCompiler)' != 'None'" Include="DCompile">
        <Targets>_DMD</Targets>
    </AvailableItemName>
  </ItemGroup>

  <PropertyGroup>
    <DbuildCompileDDLLPath Condition="'$(DbuildCompileDDLLPath)' == ''">$(MSBuildThisFileDirectory)dbuild.$(DBuildVersion).dll</DbuildCompileDDLLPath>
    <!-- using Microsoft.Build.CPPTasks.Common.Base.dll doesn't work because it does not mix with the non-base-version ? -->
    <CPPTaskPath Condition="'$(CPPTaskPath)' == ''">$(_VCTargetsPathForToolset)\Microsoft.Build.CPPTasks.Common.dll</CPPTaskPath>
  </PropertyGroup>

  <!-- load CPPTasks Assembly before dbuild, so that it doesn't have to be found as an implicit dependency -->
  <UsingTask TaskName="VCMessage" AssemblyFile="$(CPPTaskPath)" />
  
  <UsingTask TaskName="dbuild.CompileD" AssemblyFile="$(DbuildCompileDDLLPath)" />
  <UsingTask TaskName="dbuild.MultiToolTaskVisualD" AssemblyFile="$(DbuildCompileDDLLPath)" />

  <UsingTask TaskName="SetEnvironmentVariable" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <EnvKey ParameterType="System.String" Required="true" />
      <EnvValue ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            try {
                Environment.SetEnvironmentVariable(EnvKey, EnvValue, System.EnvironmentVariableTarget.Process);
            }
            catch  {
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- remove disabled files from DCompile -->
  <Target Name="_collectDFiles">

    <ItemGroup>
      <dcompile_SelectedFiles Include="$(SelectedFiles)"/>
    </ItemGroup>

    <ItemGroup Condition="'$(DCompiler)' == 'None'">
      <DCompile Remove="@(DCompile)" />
    </ItemGroup>
    
    <ItemGroup Condition="'@(dcompile_SelectedFiles)' != ''">
      <DCompile Remove="@(DCompile)" Condition="'%(Identity)' != '@(dcompile_SelectedFiles)'" />
    </ItemGroup>
    
    <ItemGroup>
      <DCompile Remove="@(DCompile)" Condition="'%(DCompile.ExcludedFromBuild)' == 'true'" />
    </ItemGroup>
  </Target>

  <Target Name="_replacePackageName">
    <!-- <Message Text="PRE:  %(DCompile.Identity)  RelativeDir:%(DCompile.RelativeDir) ObjFile:%(DCompile.ObjectFileName)" Importance="high" />
    -->

    <!-- extract package name from relative dir, avoid parent folder and drive names in package name -->
    <ItemGroup>
      <DCompile>
        <PackageName>$([System.String]::Copy('%(RelativeDir)|').Replace('\|','').Replace('|','').Replace('..','__').Replace(':','_').Replace('\','.'))</PackageName>
      </DCompile>
    </ItemGroup>

    <!-- clear mixin file if disabled -->
    <ItemGroup>
      <DCompile Condition="'%(DCompile.EnableDebugMixin)' != 'true'">
        <DebugMixin></DebugMixin>
      </DCompile>
    </ItemGroup>

    <ItemGroup>
      <DCompile Condition="'%(DCompile.ObjectFileName)' == '' and '%(DCompile.CompilationModel)' == 'Project'">
        <ObjectFileName>$(IntDir)dcompile_$(ProjectName).obj</ObjectFileName>
      </DCompile>
      <DCompile Condition="'%(DCompile.EnableDebugMixin)' == 'true' and '%(DCompile.DebugMixin)' == '' and '%(DCompile.CompilationModel)' == 'Project'">
        <DebugMixin>$(IntDir)dcompile_$(ProjectName).mixin</DebugMixin>
      </DCompile>
      <DCompile Condition="'%(DCompile.CompilationModel)' == 'Project' and '$(VisualStudioVersion)' != '12.0'">
        <UseMultiToolTask>false</UseMultiToolTask> <!-- Never use MultiToolTask when compiling by project -->
      </DCompile>
    </ItemGroup>

    <ItemGroup>
      <DCompile Condition="'%(DCompile.ObjectFileName)' == '' and '%(DCompile.CompilationModel)' == 'Package'">
        <ObjectFileName>$(IntDir)dpackage_%(PackageName).obj</ObjectFileName>
      </DCompile>
      <DCompile Condition="'%(DCompile.EnableDebugMixin)' == 'true' and '%(DCompile.DebugMixin)' == '' and '%(DCompile.CompilationModel)' == 'Package'">
        <DebugMixin>$(IntDir)dpackage_%(PackageName).mixin</DebugMixin>
      </DCompile>
      <DCompile Condition="'%(DCompile.CompilationModel)' == 'Package' and '$(VisualStudioVersion)' != '12.0'">
        <UseMultiToolTask>$(CompileD_UseMultiToolTask)</UseMultiToolTask>
      </DCompile>
    </ItemGroup>

    <ItemGroup>
      <DCompile Condition="'%(DCompile.ObjectFileName)' == '' and '%(DCompile.CompilationModel)' == 'File'">
        <ObjectFileName Condition="'%(PackageName)' == ''">$(IntDir)%(FileName).obj</ObjectFileName>
        <ObjectFileName Condition="'%(PackageName)' != ''">$(IntDir)%(PackageName).%(FileName).obj</ObjectFileName>
      </DCompile>
      <DCompile Condition="'%(DCompile.EnableDebugMixin)' == 'true' and '%(DCompile.DebugMixin)' == '' and '%(DCompile.CompilationModel)' == 'File'">
        <DebugMixin Condition="'%(PackageName)' == ''">$(IntDir)%(FileName).mixin</DebugMixin>
        <DebugMixin Condition="'%(PackageName)' != ''">$(IntDir)%(PackageName).%(FileName).mixin</DebugMixin>
      </DCompile>
      <DCompile Condition="'%(DCompile.CompilationModel)' == 'File'">
        <UseMultiToolTask>$(CompileD_UseMultiToolTask)</UseMultiToolTask>
      </DCompile>
    </ItemGroup>

    <!-- for custom object file names, use [PackageName] as a placeholder for the package name -->
    <ItemGroup>
      <DCompile>
        <ObjectFileName>$([System.String]::Copy('%(ObjectFileName)').Replace('[PackageName]','%(PackageName)'))</ObjectFileName>
        <DebugMixin>$([System.String]::Copy('%(DebugMixin)').Replace('[PackageName]','%(PackageName)'))</DebugMixin>
      </DCompile>
    </ItemGroup>

    <!-- <Message Text="POST:  %(DCompile.Identity)  CompilationModel:%(DCompile.CompilationModel) ObjFile:%(DCompile.ObjectFileName)" Importance="high" />
    -->
    
  </Target>

  <Target Name="_DMD"
    BeforeTargets="$(DCompileBeforeTargets)"
    AfterTargets="$(DCompileAfterTargets)"
    Condition="'@(DCompile)' != '' and '$(DCompiler)' != 'None'"
    DependsOnTargets="_collectDFiles;_replacePackageName">
    
    <VCMessage Condition="$(MSBuildVersion_Major) == '17'" Type="Message" Code="MSB8034" Importance="low" Arguments="CPPTaskPath;$(CPPTaskPath)"/>

    <ItemGroup Condition="'@(dcompile_SelectedFiles)' != ''">
      <DCompile Remove="@(DCompile)" Condition="'%(Identity)' != '@(dcompile_SelectedFiles)'" />
    </ItemGroup>
    
    <PropertyGroup>
      <_ToolExe Condition="'$(DCompiler)' == 'LDC'">$(LDCBinDir)ldmd2.exe</_ToolExe>
      <_ToolExe Condition="'$(DCompiler)' != 'LDC'">$(DMDBinDir)dmd.exe</_ToolExe>
    </PropertyGroup>

    <PropertyGroup>
      <_DebugFull Condition="'$(DCompiler)' == 'LDC'">false</_DebugFull>
      <_DebugFull Condition="'$(_DebugFull)' == '' and '@(DCompile->Metadata('DebugInfo')->Distinct())' == 'None'">false</_DebugFull>
      <_DebugFull Condition="'$(_DebugFull)' == ''">@(DCompile->Metadata('DebugFull')->Distinct())</_DebugFull>
      <_DebugFull Condition="'$(_DebugFull)' != 'true' and '$(_DebugFull)' != 'false'">false</_DebugFull>
    </PropertyGroup>

    <PropertyGroup>
      <_CppStandard Condition="'$(_CppStandard)' == ''">@(DCompile->Metadata('CppStandard')->Distinct())</_CppStandard>
      <_clLanguage  Condition="'$(_CppStandard)' == 'fromCpp'">@(ClCompile->Metadata('LanguageStandard')->Distinct())</_clLanguage>
      <_CppStandard Condition="'$(_CppStandard)' == 'fromCpp' and '$(_clLanguage)' == 'stdcpp14'">cpp14</_CppStandard>
      <_CppStandard Condition="'$(_CppStandard)' == 'fromCpp' and '$(_clLanguage)' == 'stdcpp17'">cpp17</_CppStandard>
      <_CppStandard Condition="'$(_CppStandard)' == 'fromCpp' and '$(_clLanguage)' == 'stdcpplatest'">cpp17</_CppStandard>
      <_CppStandard Condition="'$(_CppStandard)' == 'fromCpp' and '$(_clLanguage)' == 'Default'">cpp17</_CppStandard>
      <_CppStandard Condition="'$(_CppStandard)' == 'fromCpp'">default</_CppStandard> <!-- for older VS -->
    </PropertyGroup>

	<PropertyGroup>
      <ClMultiToolTaskMinimalRebuild>true</ClMultiToolTaskMinimalRebuild>
      <ClMultiToolTaskMinimalRebuild Condition="'$(_BuildActionType)' != 'Build' or '$(ForceRebuild)' == 'true'">false</ClMultiToolTaskMinimalRebuild>
      <ProcessorNumber Condition="'$(ProcessorNumber)' == ''">$(CL_MPCount)</ProcessorNumber>
      <MultiToolTaskVerbose>True</MultiToolTaskVerbose>
    </PropertyGroup>

    <MultiToolTaskVisualD Condition="'@(DCompile)' != '' and '%(DCompile.UseMultiToolTask)' == 'true'"
               TaskName="dbuild.CompileD"
               TaskAssemblyName="$(DbuildCompileDDLLPath)"
               Sources="@(DCompile)"

               SchedulerVerbose="$(MultiToolTaskVerbose)"
               SemaphoreProcCount="$(ProcessorNumber)"
               TrackFileAccess="$(TrackFileAccess)"
               TrackerLogDirectory="$(TLogLocation)"
               MinimalRebuildFromTracking="$(ClMultiToolTaskMinimalRebuild)"
               TLogReadFiles="@(CLTLogReadFiles)"
               TLogWriteFiles="@(CLTLogWriteFiles)"
               ToolExe="$(_ToolExe)"
               CompilationModel="%(DCompile.CompilationModel)"
    >
    </MultiToolTaskVisualD>

    <CompileD Condition="'@(DCompile)' != '' and '%(DCompile.UseMultiToolTask)' != 'true'"
              TrackerLogDirectory="$(TLogLocation)"
              ShowCommandLine="%(DCompile.ShowCommandLine)"
              AdditionalOptions="%(DCompile.AdditionalOptions)"
              Compiler="$(DCompiler)"
              ToolExe="$(_ToolExe)"
              Sources="@(DCompile)"
              
              DoNotLink="%(DCompile.DoNotLink)"
              CodeGeneration="%(DCompile.CodeGeneration)"
              
              ImportPaths="%(DCompile.ImportPaths)"
              ImportCPaths="%(DCompile.ImportCPaths)"
              StringImportPaths="%(DCompile.StringImportPaths)"
              VersionIdentifiers="%(DCompile.VersionIdentifiers)"
              DebugIdentifiers="%(DCompile.DebugIdentifiers)"
              ObjectFileName="%(DCompile.ObjectFileName)"
              PreserveSourcePath="%(DCompile.PreserveSourcePath)"
              CRuntimeLibrary="%(DCompile.CRuntimeLibrary)"
              
              Profile="%(DCompile.Profile)"
              ProfileGC="%(DCompile.ProfileGC)"
              Coverage="%(DCompile.Coverage)"
              MinCoverage="%(DCompile.MinCoverage)"
              Unittest="%(DCompile.Unittest)"
              Optimizer="%(DCompile.Optimizer)"
              Inliner="%(DCompile.Inliner)"
              StackFrame="%(DCompile.StackFrame)"
              StackStomp="%(DCompile.StackStomp)"
              AllInst="%(DCompile.AllInst)"
              Main="%(DCompile.Main)"
              CPUArchitecture="%(DCompile.CPUArchitecture)"
              DebugCode="%(DCompile.DebugCode)"
              DebugInfo="%(DCompile.DebugInfo)"
              DebugFull="$(_DebugFull)"
              DebugMixin="%(DCompile.DebugMixin)"
              BoundsCheck="%(DCompile.BoundsCheck)"
              PerformSyntaxCheckOnly="%(DCompile.PerformSyntaxCheckOnly)"
              
              BetterC="%(DCompile.BetterC)"
              CppStandard="$(_CppStandard)"
              DIP25="%(DCompile.DIP25)"
              DIP1000="%(DCompile.DIP1000)"
              DIP1008="%(DCompile.DIP1008)"
              DIP1021="%(DCompile.DIP1021)"
              RevertImport="%(DCompile.RevertImport)"
              PreviewDtorFields="%(DCompile.PreviewDtorFields)"
              PreviewIntPromote="%(DCompile.PreviewIntPromote)"
              PreviewFixAliasThis="%(DCompile.PreviewFixAliasThis)"
              PreviewRvalueRefParam="%(DCompile.PreviewRvalueRefParam)"
              PreviewNoSharedAccess="%(DCompile.PreviewNoSharedAccess)"
              PreviewMarkdown="%(DCompile.PreviewMarkdown)"
              PreviewIn="%(DCompile.PreviewIn)"
              PreviewInclusiveInContracts="%(DCompile.PreviewInclusiveInContracts)"
              TransitionVMarkdown="%(DCompile.TransitionVMarkdown)"
              TransitionField="%(DCompile.TransitionField)"
              TransitionCheckImports="%(DCompile.TransitionCheckImports)"
              TransitionComplex="%(DCompile.TransitionComplex)"

              Warnings="%(DCompile.Warnings)"
              Deprecations="%(DCompile.Deprecations)"
              Verbose="%(DCompile.Verbose)"
              ShowTLS="%(DCompile.ShowTLS)"
              ShowGC="%(DCompile.ShowGC)"
              IgnorePragma="%(DCompile.IgnorePragma)"
              ShowDependencies="%(DCompile.ShowDependencies)"
              LowMem="%(DCompile.LowMem)"

              DocDir="%(DCompile.DocDir)"
              DocFile="%(DCompile.DocFile)"
              DepFile="%(DCompile.DepFile)"
              HeaderDir="%(DCompile.HeaderDir)"
              HeaderFile="%(DCompile.HeaderFile)"
              CppHeaderFile="%(DCompile.CppHeaderFile)"
              JSONFile="%(DCompile.JSONFile)"
    >
    </CompileD>
  </Target>

  <PropertyGroup>
    <ComputeLinkInputsTargets>$(ComputeLinkInputsTargets);ComputeDCompileOutput;</ComputeLinkInputsTargets>
    <ComputeLibInputsTargets>$(ComputeLibInputsTargets);ComputeDCompileOutput;</ComputeLibInputsTargets>
  </PropertyGroup>

  <Target Name="ComputeDCompileOutput"
    Condition="'@(DCompile)' != ''"
    DependsOnTargets="_collectDFiles">

    <ItemGroup>
      <Link Include="@(DCompile->Metadata('ObjectFileName')->Distinct()->ClearMetadata())" />
      <Lib Include="@(DCompile->Metadata('ObjectFileName')->Distinct()->ClearMetadata())" />
    </ItemGroup>

  </Target>

  <PropertyGroup Condition="'$(DCompiler)' != 'None'">
    <PatchLinkInputTargets>$(PatchLinkInputTargets);DCompilePatchLinkInput;</PatchLinkInputTargets>
  </PropertyGroup>

  <!-- to be called from dependent project, returns "true" if a D file is compiled without -bettterC -->
  <Target Name="LibNeedsDLibraries" DependsOnTargets="_collectDFiles" Returns="$(_NeedsDLibraries)">
    <Message Text="LibNeedsDLibraries called on $(ConfigurationType)" Importance="low" />
    <PropertyGroup Condition="'@(DCompile)' != '' and '$(ConfigurationType)' == 'StaticLibrary'">
      <IsBetterC>@(DCompile->Metadata('BetterC')->Distinct()->ClearMetadata())</IsBetterC>
      <_NeedsDLibraries Condition="'$(IsBetterC)' == 'true'">betterC</_NeedsDLibraries>
      <_NeedsDLibraries Condition="'$(IsBetterC)' != 'true'">true</_NeedsDLibraries>
    </PropertyGroup>
    <Message Text="LibNeedsDLibraries returns $(_NeedsDLibraries)" Importance="low" />
  </Target>

  <Target Name="NeedsDLibraries" DependsOnTargets="_collectDFiles" Condition="'$(ConfigurationType)' != 'StaticLibrary'">

    <PropertyGroup Condition="'@(DCompile)' != ''">
      <IsBetterC>@(DCompile->Metadata('BetterC')->Distinct()->ClearMetadata())</IsBetterC>
      <_NeedsDLibraries Condition="'$(IsBetterC)' != 'true'">true</_NeedsDLibraries>
    </PropertyGroup>
    
    <MSBuild
        Projects="@(_MSBuildProjectReferenceExistent)"
        Targets="LibNeedsDLibraries"
        BuildInParallel="$(BuildInParallel)"
        Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
        Condition="'$(_NeedsDLibraries)' != 'true' and '%(_MSBuildProjectReferenceExistent.Extension)' == '.vcxproj' and '@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != ''"
        ContinueOnError="!$(BuildingProject)"
        RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">
        <Output TaskParameter="TargetOutputs" ItemName="LibsNeedDLibraries"/>
    </MSBuild>

    <PropertyGroup Condition="'@(DCompile)' != '' and '$(_NeedsDLibraries)' != 'true'">
      <_NeedsDLibraries Condition="'%(LibsNeedDLibraries.Identity)' == 'true'">true</_NeedsDLibraries>
    </PropertyGroup>

    <PropertyGroup>
      <_NeedsPipeLink Condition="'$(IsBetterC)' == 'true'">true</_NeedsPipeLink>
      <_NeedsPipeLink Condition="'$(_NeedsDLibraries)' == 'true'">true</_NeedsPipeLink>
    </PropertyGroup>

    <Message Text="IsBetterC=$(IsBetterC)" Importance="low" />
    <Message Text="LibsNeedDLibraries=@(LibsNeedDLibraries)" Importance="low" />
    <Message Text="_NeedsDLibraries=$(_NeedsDLibraries)" Importance="low" />
    <Message Text="_NeedsPipeLink=$(_NeedsPipeLink)" Importance="low" />
    
  </Target>

  <Target Name="DCompilePatchLinkInput" DependsOnTargets="_collectDFiles;NeedsDLibraries">

    <SetEnvironmentVariable Condition="'$(LinkToolExe)' != ''" EnvKey="dbuild_LinkToolExe" EnvValue="$([System.IO.Path]::Combine('$(LinkToolPath)', '$(LinkToolExe)'))"/>

    <PropertyGroup Condition="'$(DDemangleLink)' == '1' and '$(_NeedsPipeLink)' == 'true'">
      <LinkToolPath>$(VisualDMSBuildDir)</LinkToolPath>
      <LinkToolExe>pipelink.exe</LinkToolExe>
    </PropertyGroup>

    <PropertyGroup>
      <DRuntimeLibs Condition="'$(DCompiler)' == 'DMD' and '$(Platform)' == 'Win32'">phobos32mscoff.lib</DRuntimeLibs>
      <DRuntimeLibs Condition="'$(DCompiler)' == 'DMD' and '$(Platform)' == 'x64'">phobos64.lib</DRuntimeLibs>
      <DRuntimeLibs Condition="'$(DCompiler)' == 'LDC'">phobos2-ldc.lib;druntime-ldc.lib</DRuntimeLibs>
      <DRuntimeLibs Condition="'$(PlatformToolsetVersion)' == '140'">$(DRuntimeLibs);legacy_stdio_definitions.lib</DRuntimeLibs>
      <DRuntimeLibs Condition="'$(PlatformToolsetVersion)' == '141'">$(DRuntimeLibs);legacy_stdio_definitions.lib</DRuntimeLibs>
      <DRuntimeLibs Condition="'$(PlatformToolsetVersion)' == '142'">$(DRuntimeLibs);legacy_stdio_definitions.lib</DRuntimeLibs>
      <DRuntimeLibs Condition="'$(PlatformToolsetVersion)' == '143'">$(DRuntimeLibs);legacy_stdio_definitions.lib</DRuntimeLibs>

      <!-- LDC does not embed reference to C runtime into object files -->
      <_CRuntimeLib>@(DCompile->Metadata('CRuntimeLibrary')->Distinct()->ClearMetadata())</_CRuntimeLib>
      <CRuntimeLibs Condition="'$(_CRuntimeLib)' == 'MultiThreaded'"        >libcmt.lib</CRuntimeLibs>
      <CRuntimeLibs Condition="'$(_CRuntimeLib)' == 'MultiThreadedDebug'"   >libcmtd.lib</CRuntimeLibs>
      <CRuntimeLibs Condition="'$(_CRuntimeLib)' == 'MultiThreadedDll'"     >msvcrt.lib</CRuntimeLibs>
      <CRuntimeLibs Condition="'$(_CRuntimeLib)' == 'MultiThreadedDebugDll'">msvcrtd.lib</CRuntimeLibs>
    </PropertyGroup>
    <Message Text="_CRuntimeLib: '$(_CRuntimeLib)' -> $(CRuntimeLibs)" Importance="low" />

    <ItemGroup Condition="'$(DCompiler)' == 'DMD' and '$(_NeedsDLibraries)' == 'true'">
      <Link>
        <AdditionalLibraryDirectories Condition="'$(Platform)' == 'Win32'">$(DMDInstallDir)\windows\lib32mscoff;%(Link.AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        <AdditionalLibraryDirectories Condition="'$(Platform)' == 'x64'">$(DMDInstallDir)\windows\lib64;%(Link.AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        <AdditionalDependencies>$(DRuntimeLibs);%(Link.AdditionalDependencies)</AdditionalDependencies>
      </Link>
    </ItemGroup>
    <ItemGroup Condition="'$(DCompiler)' == 'LDC' and '$(_NeedsDLibraries)' == 'true'">
      <Link>
        <AdditionalLibraryDirectories Condition="'$(Platform)' == 'Win32'">$(LDCInstallDir)\lib32;%(Link.AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        <AdditionalLibraryDirectories Condition="'$(Platform)' == 'x64'">$(LDCInstallDir)\lib64;%(Link.AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        <AdditionalLibraryDirectories Condition="'$(Platform)' == 'ARM64'">$(LDCInstallDir)\libarm64;%(Link.AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        <AdditionalDependencies>$(DRuntimeLibs);$(CRuntimeLibs);%(Link.AdditionalDependencies)</AdditionalDependencies>
      </Link>
    </ItemGroup>
    
  </Target>

  <Target Name="Versioned_ComputeLinkImportLibraryOutputsForClean"
          DependsOnTargets="ComputeLinkImportLibraryOutputsForClean"
          Condition="'$(MSBuildVersion_Major)' &lt; '17' or ('$(MSBuildVersion_Major)' == '17' and '$(MSBuildVersion_Minor)' &lt; '9')">
  </Target>

  <!-- changing attributes on link options must be applied to all object files (including C++), so we insert
       $(PatchLinkInputTargets) as a dependency into the link chain to guarantee no object files are added later -->
  <Target Name="_Link"
          DependsOnTargets="$(BeforeLinkTargets);$(ComputeLinkInputsTargets);ComputeManifestInputsTargets;ManifestResourceCompile;PrepareResourceNames;MakeDirsForLink;DoLinkOutputFilesMatch;PreLinkEvent;$(PatchLinkInputTargets);Link;Versioned_ComputeLinkImportLibraryOutputsForClean;$(AfterLinkTargets)"
          Condition="'$(LinkCompiled)' == 'true'">
  </Target>
</Project>
